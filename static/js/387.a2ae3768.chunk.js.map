{"version":3,"file":"static/js/387.a2ae3768.chunk.js","mappings":"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","sources":["social/components/Articles/ProfileInfo/ProfileStatusFunction.tsx","social/components/Articles/ProfileInfo/ProfileInfo.tsx","social/components/Articles/MyPosts/Comments/Comments.tsx","social/components/Articles/MyPosts/MyPosts.tsx","social/components/Articles/MyPosts/MyPostsContainer.tsx","social/components/Articles/Articles.tsx","social/components/Articles/ArticlesContainer.tsx","social/components/hoc/withAuthRedirect.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { updateUserStatusThunk } from '../../../Redux/articles-reducer';\r\nfunction ProfileStatusFunction(props: any) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n    let [count, setCount] = useState(0);\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n    const activeEditMode = () => setEditMode(true);\r\n    const deactiveEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateUserStatusThunk(status);\r\n    };\r\n    const plusCount = () => setCount(count+=1);\r\n    const munusCount = () => setCount(count-=1);\r\n    const updateStatus = (event: any) => setStatus(event.currentTarget.value);\r\n    return(\r\n        <div>\r\n        {!editMode\r\n        ? <div onDoubleClick={activeEditMode}>Status: {status ? status : 'default'}</div>\r\n        : <div><input onChange={updateStatus} autoFocus={true} onBlur={deactiveEditMode} value={status} /></div>\r\n        }\r\n        <div>Count: {count} <button style={{padding: '5px'}} onClick={plusCount}> + </button><button style={{padding: '5px'}} onClick={munusCount}> - </button></div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default connect(null, {updateUserStatusThunk})(ProfileStatusFunction);","import { connect } from 'react-redux';\nimport Preloader from '../../common/preloader/Preloader';\nimport ProfileStatusFunction from './ProfileStatusFunction';\nconst ProfileInfo = (props: any) => {\n    if (!props.profile) return <Preloader />\n    return (\n        <div>\n            {props.profile.photos\n                ? <img src={props.profile.photos.small} alt=''/>\n                : <img src=\"#\" alt=''/>}\n            <div className=\"block__content\">\n                <div className=\"block__content_img\">\n                    <img src=\"#\" alt=''/>\n                </div>\n                <div>\n                    {\n                        props.isAuth\n                            ? \"Status: \" + props.profile.aboutMe\n                            : <ProfileStatusFunction {...props} status={props.status} />\n                            // : <ProfileStatus {...props} />\n                    }\n                </div>\n                <div className=\"block__content_info\" style={{ display: 'flex', flexDirection: 'column' }}>\n                    <p>Name:{props.profile.fullName}</p>\n                    <p>Job:{props.profile.lookingForAJobDescription}</p>\n                    <p>Address:{props.profile.contacts.github}</p>\n                </div>\n            </div>\n        </div>\n    );\n}\nlet mapStateToProps = (state: any) => ({\n    status: state.articlesPage.status\n});\nexport default connect(mapStateToProps)(ProfileInfo);","import React from 'react';\nconst Comments = (props: string | any) => {\n    return (\n        <div className=\"block__comments_item\">\n           <p>{props.messages} <span>Likes:{props.like}</span></p>\n        </div>\n    );\n}\n\nexport default Comments;","import React, { ReactNode } from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { maxLength, requiredField } from '../../../utils/validation/validation';\nimport { Input } from '../../common/FormControls/FormControls';\nimport Comments from './Comments/Comments';\n\ntype PropsType = {\n    articlesPage: any,\n    addPost: (messageBody: string) => object\n}\n\nclass MyPosts extends React.PureComponent<PropsType> {\n    \n    // shouldComponentUpdate(nextProps: any, nextState: any) {\n    //     return nextProps !== this.props || nextState !== this.state;\n    // }\n    onSubmit(formData: any) {\n        this.props.addPost(formData.messageBody);\n    }\n    getPostData() {\n        return this.props.articlesPage.postData.map((item: any) => <Comments messages={item.messages} key={item.id} like={item.like} />);\n    }\n    render(): ReactNode {\n        // let postElement = this.props.articlesPage.postData.map((item: any) => <Comments messages={item.messages} key={item.id} like={item.like} />);\n    // let postData: any = this.props.articlesPage.postData;\n    // let postElement = postData.map((item: any | string) => <Comments messages={item.messages} key={item.id} like={item.like} />);\n        return(\n            <div className=\"block__posts\">\n            <div><p>POSTS:</p></div>\n            <div className=\"block__comments\">\n                {this.getPostData()}\n            </div>\n            <div className=\"block__posts_input\">\n                <MyPostFormRedux onSubmit={this.onSubmit.bind(this)} />\n\n                {/* <input onChange={onPostChange} ref={newPostElement} type=\"text\" name=\"post\" value={props.newPostText} placeholder=\"Enter you post:\" />\n                <br />\n                <input type=\"submit\" name=\"submit\" value=\"send\" onClick={addPost} /> */}\n            </div>\n        </div>\n        );\n    }\n}\n\n// const MyPosts = React.memo((props: any) => {\n//     let newPostElement: any = React.createRef();\n//     let postData: any = props.articlesPage.postData;\n//     let postElement = postData.map((item: any | string) => <Comments messages={item.messages} key={item.id} like={item.like} />);\n\n//     let addPost = (messageBody: string) => {\n//         props.addPost(messageBody);\n//     }\n//     let onPostChange = () => {\n//         let text = newPostElement.current.value;\n//         props.onPostChange(text);\n//     }\n//     let onSubmit = (formData: any) => {\n//         props.addPost(formData.messageBody);\n//     }\n//     return (\n//         <div className=\"block__posts\">\n//             <div><p>POSTS:</p></div>\n//             <div className=\"block__comments\">\n//                 {postElement}\n//             </div>\n//             <div className=\"block__posts_input\">\n//                 <MyPostFormRedux onSubmit={onSubmit} />\n\n//                 {/* <input onChange={onPostChange} ref={newPostElement} type=\"text\" name=\"post\" value={props.newPostText} placeholder=\"Enter you post:\" />\n//                 <br />\n//                 <input type=\"submit\" name=\"submit\" value=\"send\" onClick={addPost} /> */}\n//             </div>\n//         </div>\n//     );\n// });\n\nconst maxLength10 = maxLength(10);\n\nlet MyPostForm = (props: any) => {\n    return(\n        <form onSubmit={props.handleSubmit}>\n            <Field component={Input} type=\"text\" name={\"messageBody\"} placeholder={\"Enter you post:\"} validate={[requiredField, maxLength10]} />\n                <br />\n                <button>Send</button>\n        </form>\n    );\n}\nconst MyPostFormRedux = reduxForm({form: \"myPost\"})(MyPostForm);\nexport default MyPosts;","import { connect } from 'react-redux';\nimport {addPostActionCreator, onPostChangeActionCreator} from '../../../Redux/articles-reducer';\nimport MyPosts from './MyPosts';\n\nlet mapStateToProps = (state: any) => ({\n    newPostText: state.articlesPage.newPostText,\n    articlesPage: state.articlesPage\n});\nlet mapDispatchToProps = (dispatch: any) => ({\n    addPost: (messageBody: string) => dispatch(addPostActionCreator(messageBody)),\n    onPostChange: (text: any) => dispatch(onPostChangeActionCreator(text))\n});\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;\n\n\n// const MyPostsContainer = (props: any) => {\n//     let state = props.store.getState();\n//     let addPost = () => {\n//         // props.addPost();\n//         props.store.dispatch(addPostActionCreator());\n//     }\n//     let onPostChange = (text: any) => {\n//         // let text = newPostElement.current.value;\n//         // props.onPostChange(text);\n//         props.store.dispatch(onPostChangeActionCreator(text));\n//     }\n//     return (\n//             <MyPosts newPostText={state.articlesPage.newPostText} onPostChange={onPostChange} addPost={addPost} />\n//     );\n// }","import React from 'react';\n// import Comments from './MyPosts/Comments/Comments';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\n\nconst Articles = (props: any) => {\n    //console.log(props);\n    // let postData = [\n    //     {id: 1, messages: \"Hello, how are you?\", like: \"10\"},\n    //     {id: 2, messages: \"Andrey You The Best\", like: \"20\"},\n    //     {id: 3, messages: \"Learn Programming ReactJs\", like: \"30\"}\n    // ];\n    return (\n        <article>\n            <ProfileInfo profile={props.profile} />\n            <MyPostsContainer />\n        </article>\n    );\n}\n\nexport default Articles;","import React, { ReactNode } from 'react';\r\nimport Articles from './Articles';\r\nimport { connect } from 'react-redux';\r\nimport { setUserProfileThunk, setDefaultUseridThunk, getUserStatusThunk } from './../../Redux/articles-reducer';\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\ntype PropsType = {\r\n    profile: object,\r\n    userid: number,\r\n    router: any,\r\n    setUserProfileThunk: (userid: number) => object,\r\n    setDefaultUseridThunk: () => object,\r\n    getUserStatusThunk: (userid: number) => object\r\n}\r\nclass ArticlesContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        this.props.setDefaultUseridThunk();\r\n        if (this.props.router.match) {\r\n            this.props.setUserProfileThunk(this.props.router.match.params.userid);\r\n        } else {\r\n            setTimeout(() => {\r\n                this.props.setUserProfileThunk(this.props.userid);\r\n                this.props.getUserStatusThunk(this.props.userid);\r\n            }, 500);\r\n        }\r\n    }\r\n    render(): ReactNode {\r\n        // if (!this.props.isAuth) return(<Navigate replace to=\"/login\" />)\r\n        return (\r\n            <Articles {...this.props} />\r\n        );\r\n    }\r\n}\r\n\r\n// let authRedirectComponent = withAuthRedirect(ArticlesContainer);\r\n\r\nlet mapStateToProps = (state: any) => ({\r\n    profile: state.articlesPage.profile,\r\n    userid: state.articlesPage.userid\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {setUserProfileThunk, setDefaultUseridThunk, getUserStatusThunk}),\r\n    withAuthRedirect\r\n)(ArticlesContainer);\r\n\r\n// export default connect(mapStateToProps, {setUserProfileThunk})(authRedirectComponent);","import React, {ReactNode} from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\ntype PropsType = {\r\n    isAuth?: boolean,\r\n    router?: any,\r\n}\r\nlet mapStateToProps = (state: any) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component: any) => {\r\n    class RedirectComponent extends React.Component<PropsType> {\r\n        render(): ReactNode {\r\n            if (!this.props.isAuth) return(<Navigate replace to=\"/login\" />);\r\n            return(<Component {...this.props} />);\r\n        }\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent);\r\n}\r\n// export const withAuthRedirect = (Component: any) => {\r\n//    const RedirectComponent = (props: any) => {\r\n//     if (props.isAuth) return(<Navigate replace to=\"/login\" />);\r\n//     return(<Component {...props} />);\r\n//    }\r\n//     return RedirectComponent;\r\n// }"],"names":["connect","updateUserStatusThunk","props","useState","editMode","setEditMode","status","setStatus","count","setCount","useEffect","onChange","event","currentTarget","value","autoFocus","onBlur","onDoubleClick","style","padding","onClick","state","articlesPage","profile","photos","src","small","alt","className","isAuth","aboutMe","display","flexDirection","fullName","lookingForAJobDescription","contacts","github","Preloader","messages","like","MyPosts","formData","this","addPost","messageBody","postData","map","item","id","getPostData","MyPostFormRedux","onSubmit","bind","React","maxLength10","maxLength","reduxForm","form","handleSubmit","Field","component","Input","type","name","placeholder","validate","requiredField","newPostText","dispatch","addPostActionCreator","onPostChange","text","onPostChangeActionCreator","ArticlesContainer","setDefaultUseridThunk","router","match","setUserProfileThunk","params","userid","setTimeout","getUserStatusThunk","compose","withAuthRedirect","mapStateToProps","auth","Component","RedirectComponent","replace","to"],"sourceRoot":""}