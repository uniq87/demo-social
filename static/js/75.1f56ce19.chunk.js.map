{"version":3,"file":"static/js/75.1f56ce19.chunk.js","mappings":"yLACA,G,QAAA,CAAgB,UAAY,2BAA2B,KAAO,sBAAsB,QAAU,yBAAyB,OAAS,0B,mBCShI,EANmB,SAACA,GAChB,IAAIC,EAAe,aAAeD,EAAME,KACxC,OACI,0BAAK,SAAC,KAAD,CAASC,GAAIF,EAAMG,UAAW,qBAAEC,SAAyBC,EAAAA,OAAe,EAA1C,EAA9B,SAA6EN,EAAMO,QAE/F,ECHD,EALgB,SAACP,GACb,OACI,yBAAMA,EAAMQ,SAEnB,E,uCC8DKC,GAAcC,EAAAA,EAAAA,GAAU,IAUxBC,GAAkBC,EAAAA,EAAAA,GAAU,CAAEC,KAAM,WAAlBD,EATP,SAACZ,GACd,OACI,kBAAMc,SAAUd,EAAMe,aAAtB,WACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EAAOC,KAAK,OAAOZ,KAAK,UAAUa,SAAU,CAACC,EAAAA,EAAeZ,MAC9E,mBACA,mFAGX,IAED,EAtEgB,SAACT,GACb,IAAIsB,EAAatB,EAAMuB,MAAMC,YAAYF,WACrCG,EAAczB,EAAMuB,MAAMC,YAAYC,YAStCC,EAAgBJ,EAAWK,KAAI,SAACC,GAAD,OAAe,SAAC,EAAD,CAAYrB,KAAMqB,EAAKrB,KAAoBL,KAAM0B,EAAKC,IAApBD,EAAKC,GAAtD,IAQ/BC,GAAiB,OAAIL,GAAaM,UAAUJ,KAAI,SAACC,GAAD,OAAe,SAAC,EAAD,CAAuBpB,QAASoB,EAAKpB,SAAvBoB,EAAKC,GAAlC,IAMpD,OACI,4BACI,qCACA,iBAAKzB,UAAWE,EAAAA,UAAhB,WACI,gBAAKF,UAAWE,EAAAA,KAAhB,SACKoB,KAaL,iBAAKtB,UAAWE,EAAAA,QAAhB,UACKwB,GACD,gBAAK1B,UAAWE,EAAAA,WAAhB,UACI,SAACK,EAAD,CAAiBG,SAzBtB,SAACkB,GACZhC,EAAMiC,WAAWD,EAASxB,QAC7B,cAmCJ,EC1CD,GALyB0B,E,QAAAA,KACrBC,EAAAA,EAAAA,KAbkB,SAACZ,GAAD,MAAiB,CACnCA,MAAOA,EADW,IAGG,SAACa,GAAD,MAAoB,CACzCH,WAAY,SAACzB,GAAD,OAAqB4B,GAASC,EAAAA,EAAAA,IAAwB7B,GAAtD,EACZ8B,gBAAiB,SAACC,GAAD,OAAeH,GAASI,EAAAA,EAAAA,IAA6BD,GAArD,EAFI,IAWrBE,EAAAA,EAFqBP,CAGvBQ,E,mJCfEC,EAAkB,SAACpB,GAAD,MAAiB,CACnCqB,OAAQrB,EAAMsB,KAAKD,OADD,EAITH,EAAmB,SAACK,GAAoB,IAC3CC,EAD0C,0IAE5C,WACI,OAAKC,KAAKhD,MAAM4C,QACT,SAACE,GAAD,UAAeE,KAAKhD,SADI,SAAC,KAAD,CAAUiD,SAAO,EAAC9C,GAAG,UAEvD,KAL2C,GAChB+C,EAAAA,WAMhC,OAAOf,EAAAA,EAAAA,IAAQQ,EAARR,CAAyBY,EACnC,C","sources":["webpack://app1/./src/social/components/Dialogs/Dialogs.module.css?6c6f","social/components/Dialogs/DialogItem/DialogItem.tsx","social/components/Dialogs/Message/Message.tsx","social/components/Dialogs/Dialogs.tsx","social/components/Dialogs/DialogsContainer.tsx","social/components/hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Dialogs_container__aTvlP\",\"name\":\"Dialogs_name__X+Ov+\",\"message\":\"Dialogs_message__Kmr-D\",\"active\":\"Dialogs_active__KqsZQ\"};","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport style from './../Dialogs.module.css';\n\nconst DialogItem = (props: string | any) => {\n    let path: string = \"/dialogs/?\" + props.link;\n    return(\n        <div><NavLink to={path} className={({isActive}) => isActive ? style.active : \"\"}>{props.name}</NavLink></div>\n    );\n}\nexport default DialogItem;","import React from 'react';\nconst Message = (props: string | any) => {\n    return(\n        <div>{props.message}</div>\n    );\n}\nexport default Message;","import React from 'react';\nimport style from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\nimport { Field, reduxForm } from 'redux-form';\nimport { Input } from '../common/FormControls/FormControls';\nimport { maxLength, requiredField } from '../../utils/validation/validation';\n\nconst Dialogs = (props: any) => {\n    let dialogData = props.state.messagePage.dialogData;\n    let messageData = props.state.messagePage.messageData;\n    // let dialogData = [\n    //     {id: \":id1\", name: \"Igor\"},\n    //     {id: \":id2\", name: \"Sveta\"},\n    //     {id: \":id3\", name: \"Nada\"},\n    //     {id: \":id4\", name: \"Petr\"},\n    //     {id: \":id5\", name: \"Vladimir\"}\n    // ];\n\n    let dialogElement = dialogData.map((item: any) => <DialogItem name={item.name} key={item.id} link={item.id} />);\n\n    // let messageData = [\n    //     {id: 1, message: \"Hello\"},\n    //     {id: 2, message: \"How are you?\"},\n    //     {id: 3, message: \"Andrey YOU The Best Programming\"}\n    // ];\n\n    let messageElement = [...messageData].reverse().map((item: any) => <Message key={item.id} message={item.message} />);\n\n    let onSubmit = (formData: any) => {\n        props.addMessage(formData.message);\n    }\n    // if (!props.isAuth) return(<Navigate replace to=\"/login\" />);\n    return (\n        <div>\n            <h2>Dialogs</h2>\n            <div className={style.container}>\n                <div className={style.name}>\n                    {dialogElement}\n                    {/* <DialogItem name={dialogData[0].name} link={dialogData[0].id} /> */}\n                    {/* <DialogItem name=\"Igor\" link=\":id1\" />\n                    <DialogItem name=\"Sveta\" link=\":id2\" />\n                    <DialogItem name=\"Nada\" link=\":id3\" />\n                    <DialogItem name=\"Petr\" link=\":id4\" />\n                    <DialogItem name=\"Vladimir\" link=\":id5\" /> */}\n                    {/* <div><NavLink to=\"/dialogs/:id1\">Igor</NavLink></div>\n                    <div><NavLink to=\"/dialogs/:id2\">Sveta</NavLink></div>\n                    <div><NavLink to=\"/dialogs/:id3\">Nada</NavLink></div>\n                    <div><NavLink to=\"/dialogs/:id4\">Petr</NavLink></div>\n                    <div><NavLink to=\"/dialogs/:id5\">Vladimir</NavLink></div> */}\n                </div>\n                <div className={style.message}>\n                    {messageElement}\n                    <div className={style.addMessage}>\n                        <DialogFormRedux onSubmit={onSubmit} />\n                        {/* <input onChange={onMessageChange} ref={newMessageElement} type=\"text\" value={props.state.messagePage.newMessageText} name=\"message\" />\n                        <br />\n                        <input type=\"submit\" name=\"submit\" value=\"Добавить\" onClick={addMessage} /> */}\n                    </div>\n                    {/* <Message message={messageData[0].message} />\n                    <Message message={messageData[0].message} />\n                    <Message message={messageData[0].message} /> */}\n                </div>\n            </div>\n        </div>\n    );\n}\nconst maxLength10 = maxLength(10);\nlet DialogForm = (props: any) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field component={Input} type=\"text\" name=\"message\" validate={[requiredField, maxLength10]} />\n            <br />\n            <button>Добавить</button>\n        </form>\n    );\n}\nconst DialogFormRedux = reduxForm({ form: 'Dialogs' })(DialogForm);\nexport default Dialogs;","// import React from 'react';\nimport { connect } from 'react-redux';\nimport { addMessageActionCreator, onMessageChangeActionCreator } from '../../Redux/message-reducer';\nimport { withAuthRedirect } from '../hoc/withAuthRedirect';\nimport Dialogs from './Dialogs';\nimport {compose} from 'redux';\n\nlet mapStateToProps = (state: any) => ({\n    state: state\n});\nlet mapDispatchToProps = (dispatch: any) => ({\n    addMessage: (message: string) => dispatch(addMessageActionCreator(message)),\n    onMessageChange: (text: any) => dispatch(onMessageChangeActionCreator(text))\n});\n\n// let authRedirectComponent = withAuthRedirect(Dialogs);\n\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(authRedirectComponent);\n\nconst DialogsContainer = compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs);\n\nexport default DialogsContainer;\n\n\n// const DialogsContainer = (props: any) => {\n    //     let state = props.store.getState();\n    //     let addMessage = () => {\n    //         props.store.dispatch(addMessageActionCreator());\n    //     }\n    //     let onMessageChange = (text: any) => {\n    //         props.store.dispatch(onMessageChangeActionCreator(text));\n    //     }\n    \n    //     return(\n    //         <Dialogs state={state} onMessageChange={onMessageChange} addMessage={addMessage} />\n    //     );\n    // }","import React, {ReactNode} from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\ntype PropsType = {\r\n    isAuth?: boolean,\r\n    router?: any,\r\n}\r\nlet mapStateToProps = (state: any) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component: any) => {\r\n    class RedirectComponent extends React.Component<PropsType> {\r\n        render(): ReactNode {\r\n            if (!this.props.isAuth) return(<Navigate replace to=\"/login\" />);\r\n            return(<Component {...this.props} />);\r\n        }\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent);\r\n}\r\n// export const withAuthRedirect = (Component: any) => {\r\n//    const RedirectComponent = (props: any) => {\r\n//     if (props.isAuth) return(<Navigate replace to=\"/login\" />);\r\n//     return(<Component {...props} />);\r\n//    }\r\n//     return RedirectComponent;\r\n// }"],"names":["props","path","link","to","className","isActive","style","name","message","maxLength10","maxLength","DialogFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Input","type","validate","requiredField","dialogData","state","messagePage","messageData","dialogElement","map","item","id","messageElement","reverse","formData","addMessage","compose","connect","dispatch","addMessageActionCreator","onMessageChange","text","onMessageChangeActionCreator","withAuthRedirect","Dialogs","mapStateToProps","isAuth","auth","Component","RedirectComponent","this","replace","React"],"sourceRoot":""}